import { Component, OnInit, HostBinding, inject } from '@angular/core';import { CommonModule } from '@angular/common';import { RouterOutlet, Router, NavigationEnd } from '@angular/router';import { HeaderComponent } from './components/header/header.component';import { FooterComponent } from './components/footer/footer.component';import { AuthService } from './services/auth.service';import { filter } from 'rxjs/operators';@Component({  selector: 'app-root',  standalone: true,  imports: [CommonModule, RouterOutlet, HeaderComponent, FooterComponent],  template: `    <div id="app-container">      <app-header        [darkMode]="darkMode"        (toggleDarkMode)="toggleDarkMode()"        (navigatePage)="navigateTo($event.page, $event.anchor)"      ></app-header>      <main>        <router-outlet></router-outlet>      </main>      <app-footer></app-footer>    </div>  `,  styles: [`    .gradient-text {      background: linear-gradient(90deg, #0A84FF, #34d399);      -webkit-background-clip: text;      -webkit-text-fill-color: transparent;    }  `]})export class AppComponent implements OnInit {  darkMode: boolean = false;  isMenuOpen: boolean = false; // This is handled by HeaderComponent now  activeFaq: number | null = null; // This is handled by HomeComponent now  router = inject(Router);  authService = inject(AuthService);  @HostBinding('class') get hostClasses() {    return `bg-ios-bg dark:bg-ios-bg-dark text-ios-text-primary dark:text-ios-text-primary-dark font-sans antialiased ${this.darkMode ? 'dark' : ''}`;  }  ngOnInit() {    this.initializeDarkMode();    this.router.events.pipe(      filter((event) => event instanceof NavigationEnd)    ).subscribe(() => {      // Scroll to top on route change, unless it's a fragment navigation      if (!this.router.url.includes('#')) {        window.scrollTo(0, 0);      }    });  }  initializeDarkMode() {    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {      this.darkMode = true;      document.documentElement.classList.add('dark');    } else {      this.darkMode = false;      document.documentElement.classList.remove('dark');    }  }  toggleDarkMode() {    this.darkMode = !this.darkMode;    if (this.darkMode) {      localStorage.theme = 'dark';      document.documentElement.classList.add('dark');    } else {      localStorage.theme = 'light';      document.documentElement.classList.remove('dark');    }  }  navigateTo(page: string, anchor: string | null = null) {    if (anchor) {      this.router.navigate([page], { fragment: anchor });    } else {      this.router.navigate([page]);    }  }}