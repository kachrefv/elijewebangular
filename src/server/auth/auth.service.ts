import { Injectable, UnauthorizedException } from '@nestjs/common';import { UserService } from '../user/user.service';import { JwtService } from '@nestjs/jwt';import * as bcrypt from 'bcrypt';import { RegisterDto } from './dto/register.dto';@Injectable()export class AuthService {  constructor(    private userService: UserService,    private jwtService: JwtService,  ) {}  async register(registerDto: RegisterDto) {    const hashedPassword = await bcrypt.hash(registerDto.password, 10);    const user = await this.userService.create({      email: registerDto.email,      name: registerDto.name,      password: hashedPassword,    });    // eslint-disable-next-line @typescript-eslint/no-unused-vars    const { password, ...result } = user;    return result;  }  async login(email: string, pass: string): Promise<{ access_token: string }> {    const user = await this.userService.findByEmail(email);    if (!user) {      throw new UnauthorizedException('Invalid credentials');    }    const isPasswordValid = await bcrypt.compare(pass, user.password);    if (!isPasswordValid) {      throw new UnauthorizedException('Invalid credentials');    }    const payload = { email: user.email, sub: user.id };    return {      access_token: this.jwtService.sign(payload),    };  }}