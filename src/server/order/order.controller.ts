import {  Controller,  Get,  Post,  Body,  Patch,  Param,  Delete,  UseGuards,  Request,} from '@nestjs/common';import { OrderService } from './order.service';import { CreateOrderDto } from './dto/create-order.dto';import { UpdateOrderDto } from './dto/update-order.dto';import { JwtAuthGuard } from '../auth/jwt-auth.guard';import { CreateOrderItemDto } from './dto/create-order-item.dto';@UseGuards(JwtAuthGuard)@Controller('orders')export class OrderController {  constructor(private readonly orderService: OrderService) {}  @Post()  async create(@Request() req, @Body() createOrderDto: CreateOrderDto) {    const order = await this.orderService.create({      ...createOrderDto,      user: { connect: { id: req.user.userId } },    });    if (createOrderDto.items && createOrderDto.items.length > 0) {      for (const item of createOrderDto.items) {        await this.orderService.createOrderItem(          order.id,          item.productId,          item.quantity,        );      }    }    return this.orderService.findOne(order.id, req.user.userId); // Return the full order with items  }  @Post(':orderId/items')  async addOrderItem(    @Param('orderId') orderId: string,    @Body() createOrderItemDto: CreateOrderItemDto,  ) {    return this.orderService.createOrderItem(      orderId,      createOrderItemDto.productId,      createOrderItemDto.quantity,    );  }  @Get()  findAll(@Request() req) {    return this.orderService.findAll(req.user.userId);  }  @Get('summary')  getSalesSummary(@Request() req) {    return this.orderService.getSalesSummary(req.user.userId);  }  @Get(':id')  findOne(@Request() req, @Param('id') id: string) {    return this.orderService.findOne(id, req.user.userId);  }  @Patch(':id')  update(    @Request() req,    @Param('id') id: string,    @Body() updateOrderDto: UpdateOrderDto,  ) {    return this.orderService.update(id, req.user.userId, updateOrderDto);  }  @Delete(':id')  remove(@Request() req, @Param('id') id: string) {    return this.orderService.remove(id, req.user.userId);  }}